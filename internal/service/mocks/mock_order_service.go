// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/service.go
//
// Generated by this command:
//
//	mockgen -source=internal/service/service.go -destination=internal/service/mocks/mock_order_service.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	entity "order_service/internal/entity"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockOrderServiceInterface is a mock of OrderServiceInterface interface.
type MockOrderServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockOrderServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockOrderServiceInterfaceMockRecorder is the mock recorder for MockOrderServiceInterface.
type MockOrderServiceInterfaceMockRecorder struct {
	mock *MockOrderServiceInterface
}

// NewMockOrderServiceInterface creates a new mock instance.
func NewMockOrderServiceInterface(ctrl *gomock.Controller) *MockOrderServiceInterface {
	mock := &MockOrderServiceInterface{ctrl: ctrl}
	mock.recorder = &MockOrderServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderServiceInterface) EXPECT() *MockOrderServiceInterfaceMockRecorder {
	return m.recorder
}

// CancelOrder mocks base method.
func (m *MockOrderServiceInterface) CancelOrder(userID, orderID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelOrder", userID, orderID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelOrder indicates an expected call of CancelOrder.
func (mr *MockOrderServiceInterfaceMockRecorder) CancelOrder(userID, orderID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelOrder", reflect.TypeOf((*MockOrderServiceInterface)(nil).CancelOrder), userID, orderID)
}

// CreateOrder mocks base method.
func (m *MockOrderServiceInterface) CreateOrder(UserID int64, Items []entity.OrderItem, TotalPrice float64) (*entity.PaymentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", UserID, Items, TotalPrice)
	ret0, _ := ret[0].(*entity.PaymentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockOrderServiceInterfaceMockRecorder) CreateOrder(UserID, Items, TotalPrice any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockOrderServiceInterface)(nil).CreateOrder), UserID, Items, TotalPrice)
}

// DeleteOrder mocks base method.
func (m *MockOrderServiceInterface) DeleteOrder(orderID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrder", orderID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrder indicates an expected call of DeleteOrder.
func (mr *MockOrderServiceInterfaceMockRecorder) DeleteOrder(orderID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrder", reflect.TypeOf((*MockOrderServiceInterface)(nil).DeleteOrder), orderID)
}

// GetOrderByID mocks base method.
func (m *MockOrderServiceInterface) GetOrderByID(orderID int64) (*entity.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderByID", orderID)
	ret0, _ := ret[0].(*entity.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderByID indicates an expected call of GetOrderByID.
func (mr *MockOrderServiceInterfaceMockRecorder) GetOrderByID(orderID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderByID", reflect.TypeOf((*MockOrderServiceInterface)(nil).GetOrderByID), orderID)
}

// GetOrdersByUserID mocks base method.
func (m *MockOrderServiceInterface) GetOrdersByUserID(userID int64) ([]entity.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrdersByUserID", userID)
	ret0, _ := ret[0].([]entity.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrdersByUserID indicates an expected call of GetOrdersByUserID.
func (mr *MockOrderServiceInterfaceMockRecorder) GetOrdersByUserID(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrdersByUserID", reflect.TypeOf((*MockOrderServiceInterface)(nil).GetOrdersByUserID), userID)
}

// UpdateOrderStatus mocks base method.
func (m *MockOrderServiceInterface) UpdateOrderStatus(orderID int64, status string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderStatus", orderID, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrderStatus indicates an expected call of UpdateOrderStatus.
func (mr *MockOrderServiceInterfaceMockRecorder) UpdateOrderStatus(orderID, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderStatus", reflect.TypeOf((*MockOrderServiceInterface)(nil).UpdateOrderStatus), orderID, status)
}
