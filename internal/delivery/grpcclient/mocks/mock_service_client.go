// Code generated by MockGen. DO NOT EDIT.
// Source: internal/delivery/grpcclient/interfaces.go
//
// Generated by this command:
//
//	mockgen -source=internal/delivery/grpcclient/interfaces.go -destination=internal/delivery/grpcclient/mocks/mock_service_client.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	paymentpb "order_service/internal/paymentpb"
	productpb "order_service/internal/productpb"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockProductServiceClientInterface is a mock of ProductServiceClientInterface interface.
type MockProductServiceClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockProductServiceClientInterfaceMockRecorder
	isgomock struct{}
}

// MockProductServiceClientInterfaceMockRecorder is the mock recorder for MockProductServiceClientInterface.
type MockProductServiceClientInterfaceMockRecorder struct {
	mock *MockProductServiceClientInterface
}

// NewMockProductServiceClientInterface creates a new mock instance.
func NewMockProductServiceClientInterface(ctrl *gomock.Controller) *MockProductServiceClientInterface {
	mock := &MockProductServiceClientInterface{ctrl: ctrl}
	mock.recorder = &MockProductServiceClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductServiceClientInterface) EXPECT() *MockProductServiceClientInterfaceMockRecorder {
	return m.recorder
}

// GetProductStock mocks base method.
func (m *MockProductServiceClientInterface) GetProductStock(productIDs []int64) (map[int64]*productpb.ProductStockInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductStock", productIDs)
	ret0, _ := ret[0].(map[int64]*productpb.ProductStockInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductStock indicates an expected call of GetProductStock.
func (mr *MockProductServiceClientInterfaceMockRecorder) GetProductStock(productIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductStock", reflect.TypeOf((*MockProductServiceClientInterface)(nil).GetProductStock), productIDs)
}

// MockPaymentServiceClientInterface is a mock of PaymentServiceClientInterface interface.
type MockPaymentServiceClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentServiceClientInterfaceMockRecorder
	isgomock struct{}
}

// MockPaymentServiceClientInterfaceMockRecorder is the mock recorder for MockPaymentServiceClientInterface.
type MockPaymentServiceClientInterfaceMockRecorder struct {
	mock *MockPaymentServiceClientInterface
}

// NewMockPaymentServiceClientInterface creates a new mock instance.
func NewMockPaymentServiceClientInterface(ctrl *gomock.Controller) *MockPaymentServiceClientInterface {
	mock := &MockPaymentServiceClientInterface{ctrl: ctrl}
	mock.recorder = &MockPaymentServiceClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPaymentServiceClientInterface) EXPECT() *MockPaymentServiceClientInterfaceMockRecorder {
	return m.recorder
}

// GeneratePaymentLink mocks base method.
func (m *MockPaymentServiceClientInterface) GeneratePaymentLink(userID, orderID int64, amount float64) (*paymentpb.PaymentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GeneratePaymentLink", userID, orderID, amount)
	ret0, _ := ret[0].(*paymentpb.PaymentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GeneratePaymentLink indicates an expected call of GeneratePaymentLink.
func (mr *MockPaymentServiceClientInterfaceMockRecorder) GeneratePaymentLink(userID, orderID, amount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeneratePaymentLink", reflect.TypeOf((*MockPaymentServiceClientInterface)(nil).GeneratePaymentLink), userID, orderID, amount)
}
